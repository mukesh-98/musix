{"ast":null,"code":"/*!\n * export-dirs <https://github.com/jonschlinkert/export-dirs>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nmodule.exports = function exportDirs(dir) {\n  if (typeof dir !== 'string') {\n    throw new TypeError('export-dirs expects `dir` to be a string.');\n  }\n\n  var dirs = tryReaddir(dir);\n  var len = dirs.length;\n  var res = {};\n  res._ = {};\n\n  while (len--) {\n    var name = dirs[len];\n    var fp = path.resolve(dir, name);\n\n    if (fs.statSync(fp).isDirectory()) {\n      var fns = tryRequire(fp);\n\n      for (var key in fns) {\n        if (fns.hasOwnProperty(key)) {\n          res._[key] = fns[key];\n        }\n      }\n\n      res[name] = fns;\n    } else if (isValid(fp)) {\n      name = basename(name);\n      res[name] = res._[name] = require(fp);\n    }\n  }\n\n  return res;\n};\n\nfunction isValid(fp) {\n  return fp.indexOf('index.js') === -1 && fp.substr(-3) === '.js';\n}\n\nfunction basename(fp) {\n  return fp.slice(0, fp.length - 3);\n}\n\nfunction tryReaddir(fp) {\n  try {\n    return fs.readdirSync(fp);\n  } catch (err) {\n    err.origin = __dirname;\n    err.msg = 'export-dirs cannot read directory: ' + fp;\n    throw new Error(err);\n  }\n}\n\nfunction tryRequire(fp) {\n  try {\n    return require(fp);\n  } catch (err) {\n    err.origin = __dirname;\n    err.msg = 'export-dirs cannot require: ' + fp;\n    throw new Error(err);\n  }\n}","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/export-dirs/index.js"],"names":["fs","require","path","module","exports","exportDirs","dir","TypeError","dirs","tryReaddir","len","length","res","_","name","fp","resolve","statSync","isDirectory","fns","tryRequire","key","hasOwnProperty","isValid","basename","indexOf","substr","slice","readdirSync","err","origin","__dirname","msg","Error"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACxC,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIC,SAAJ,CAAc,2CAAd,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGC,UAAU,CAACH,GAAD,CAArB;AACA,MAAII,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,GAAG,GAAG,EAAV;AACAA,EAAAA,GAAG,CAACC,CAAJ,GAAQ,EAAR;;AAEA,SAAOH,GAAG,EAAV,EAAc;AACZ,QAAII,IAAI,GAAGN,IAAI,CAACE,GAAD,CAAf;AACA,QAAIK,EAAE,GAAGb,IAAI,CAACc,OAAL,CAAaV,GAAb,EAAkBQ,IAAlB,CAAT;;AACA,QAAId,EAAE,CAACiB,QAAH,CAAYF,EAAZ,EAAgBG,WAAhB,EAAJ,EAAmC;AACjC,UAAIC,GAAG,GAAGC,UAAU,CAACL,EAAD,CAApB;;AAEA,WAAK,IAAIM,GAAT,IAAgBF,GAAhB,EAAqB;AACnB,YAAIA,GAAG,CAACG,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3BT,UAAAA,GAAG,CAACC,CAAJ,CAAMQ,GAAN,IAAaF,GAAG,CAACE,GAAD,CAAhB;AACD;AACF;;AACDT,MAAAA,GAAG,CAACE,IAAD,CAAH,GAAYK,GAAZ;AACD,KATD,MASO,IAAII,OAAO,CAACR,EAAD,CAAX,EAAiB;AACtBD,MAAAA,IAAI,GAAGU,QAAQ,CAACV,IAAD,CAAf;AACAF,MAAAA,GAAG,CAACE,IAAD,CAAH,GAAYF,GAAG,CAACC,CAAJ,CAAMC,IAAN,IAAcb,OAAO,CAACc,EAAD,CAAjC;AACD;AACF;;AACD,SAAOH,GAAP;AACD,CA5BD;;AA8BA,SAASW,OAAT,CAAiBR,EAAjB,EAAqB;AACnB,SAAOA,EAAE,CAACU,OAAH,CAAW,UAAX,MAA2B,CAAC,CAA5B,IACFV,EAAE,CAACW,MAAH,CAAU,CAAC,CAAX,MAAkB,KADvB;AAED;;AAED,SAASF,QAAT,CAAkBT,EAAlB,EAAsB;AACpB,SAAOA,EAAE,CAACY,KAAH,CAAS,CAAT,EAAYZ,EAAE,CAACJ,MAAH,GAAY,CAAxB,CAAP;AACD;;AAED,SAASF,UAAT,CAAoBM,EAApB,EAAwB;AACtB,MAAI;AACF,WAAOf,EAAE,CAAC4B,WAAH,CAAeb,EAAf,CAAP;AACD,GAFD,CAEE,OAAMc,GAAN,EAAW;AACXA,IAAAA,GAAG,CAACC,MAAJ,GAAaC,SAAb;AACAF,IAAAA,GAAG,CAACG,GAAJ,GAAU,wCAAwCjB,EAAlD;AACA,UAAM,IAAIkB,KAAJ,CAAUJ,GAAV,CAAN;AACD;AACF;;AAED,SAAST,UAAT,CAAoBL,EAApB,EAAwB;AACtB,MAAI;AACF,WAAOd,OAAO,CAACc,EAAD,CAAd;AACD,GAFD,CAEE,OAAMc,GAAN,EAAW;AACXA,IAAAA,GAAG,CAACC,MAAJ,GAAaC,SAAb;AACAF,IAAAA,GAAG,CAACG,GAAJ,GAAU,iCAAiCjB,EAA3C;AACA,UAAM,IAAIkB,KAAJ,CAAUJ,GAAV,CAAN;AACD;AACF","sourcesContent":["/*!\n * export-dirs <https://github.com/jonschlinkert/export-dirs>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function exportDirs(dir) {\n  if (typeof dir !== 'string') {\n    throw new TypeError('export-dirs expects `dir` to be a string.');\n  }\n\n  var dirs = tryReaddir(dir);\n  var len = dirs.length;\n  var res = {}\n  res._ = {};\n\n  while (len--) {\n    var name = dirs[len];\n    var fp = path.resolve(dir, name);\n    if (fs.statSync(fp).isDirectory()) {\n      var fns = tryRequire(fp);\n\n      for (var key in fns) {\n        if (fns.hasOwnProperty(key)) {\n          res._[key] = fns[key];\n        }\n      }\n      res[name] = fns;\n    } else if (isValid(fp)) {\n      name = basename(name);\n      res[name] = res._[name] = require(fp);\n    }\n  }\n  return res;\n};\n\nfunction isValid(fp) {\n  return fp.indexOf('index.js') === -1\n    && fp.substr(-3) === '.js';\n}\n\nfunction basename(fp) {\n  return fp.slice(0, fp.length - 3);\n}\n\nfunction tryReaddir(fp) {\n  try {\n    return fs.readdirSync(fp);\n  } catch(err) {\n    err.origin = __dirname;\n    err.msg = 'export-dirs cannot read directory: ' + fp;\n    throw new Error(err);\n  }\n}\n\nfunction tryRequire(fp) {\n  try {\n    return require(fp);\n  } catch(err) {\n    err.origin = __dirname;\n    err.msg = 'export-dirs cannot require: ' + fp;\n    throw new Error(err);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}