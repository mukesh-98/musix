{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, refType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\n/**\n * ⚠️⚠️⚠️\n * If you want the DOM element of a Material-UI component check out\n * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\n * first.\n *\n * This component uses `findDOMNode` which is deprecated in React.StrictMode.\n *\n * Helper component to allow attaching a ref to a\n * wrapped element to access the underlying DOM element.\n *\n * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\n * For example:\n * ```jsx\n * import React from 'react';\n * import RootRef from '@material-ui/core/RootRef';\n *\n * function MyComponent() {\n *   const domRef = React.useRef();\n *\n *   React.useEffect(() => {\n *     console.log(domRef.current); // DOM node\n *   }, []);\n *\n *   return (\n *     <RootRef rootRef={domRef}>\n *       <SomeChildComponent />\n *     </RootRef>\n *   );\n * }\n * ```\n */\n\nclass RootRef extends React.Component {\n  componentDidMount() {\n    this.ref = ReactDOM.findDOMNode(this);\n    setRef(this.props.rootRef, this.ref);\n  }\n\n  componentDidUpdate(prevProps) {\n    const ref = ReactDOM.findDOMNode(this);\n\n    if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {\n      if (prevProps.rootRef !== this.props.rootRef) {\n        setRef(prevProps.rootRef, null);\n      }\n\n      this.ref = ref;\n      setRef(this.props.rootRef, this.ref);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ref = null;\n    setRef(this.props.rootRef, null);\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RootRef.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * A ref that points to the first DOM node of the wrapped element.\n   */\n  rootRef: refType.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;\n}\n\nexport default RootRef;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/RootRef/RootRef.js"],"names":["React","ReactDOM","PropTypes","exactProp","refType","setRef","RootRef","Component","componentDidMount","ref","findDOMNode","props","rootRef","componentDidUpdate","prevProps","componentWillUnmount","render","children","process","env","NODE_ENV","propTypes","element","isRequired"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,oBAAnC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAMC,OAAN,SAAsBN,KAAK,CAACO,SAA5B,CAAsC;AACpCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,GAAL,GAAWR,QAAQ,CAACS,WAAT,CAAqB,IAArB,CAAX;AACAL,IAAAA,MAAM,CAAC,KAAKM,KAAL,CAAWC,OAAZ,EAAqB,KAAKH,GAA1B,CAAN;AACD;;AAEDI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAML,GAAG,GAAGR,QAAQ,CAACS,WAAT,CAAqB,IAArB,CAAZ;;AAEA,QAAII,SAAS,CAACF,OAAV,KAAsB,KAAKD,KAAL,CAAWC,OAAjC,IAA4C,KAAKH,GAAL,KAAaA,GAA7D,EAAkE;AAChE,UAAIK,SAAS,CAACF,OAAV,KAAsB,KAAKD,KAAL,CAAWC,OAArC,EAA8C;AAC5CP,QAAAA,MAAM,CAACS,SAAS,CAACF,OAAX,EAAoB,IAApB,CAAN;AACD;;AAED,WAAKH,GAAL,GAAWA,GAAX;AACAJ,MAAAA,MAAM,CAAC,KAAKM,KAAL,CAAWC,OAAZ,EAAqB,KAAKH,GAA1B,CAAN;AACD;AACF;;AAEDM,EAAAA,oBAAoB,GAAG;AACrB,SAAKN,GAAL,GAAW,IAAX;AACAJ,IAAAA,MAAM,CAAC,KAAKM,KAAL,CAAWC,OAAZ,EAAqB,IAArB,CAAN;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKL,KAAL,CAAWM,QAAlB;AACD;;AA1BmC;;AA8BtCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,OAAO,CAACe,SAAR,GAAoB;AAC1D;;;AAGAJ,EAAAA,QAAQ,EAAEf,SAAS,CAACoB,OAAV,CAAkBC,UAJ8B;;AAM1D;;;AAGAX,EAAAA,OAAO,EAAER,OAAO,CAACmB;AATyC,CAA5D,GAUI,KAAK,CAVT;;AAYA,IAAIL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCF,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,OAAO,CAACe,SAAR,GAAoBlB,SAAS,CAACG,OAAO,CAACe,SAAT,CAArE,GAA2F,KAAK,CAAhG;AACD;;AAED,eAAef,OAAf","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, refType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\n/**\n * ⚠️⚠️⚠️\n * If you want the DOM element of a Material-UI component check out\n * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)\n * first.\n *\n * This component uses `findDOMNode` which is deprecated in React.StrictMode.\n *\n * Helper component to allow attaching a ref to a\n * wrapped element to access the underlying DOM element.\n *\n * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\n * For example:\n * ```jsx\n * import React from 'react';\n * import RootRef from '@material-ui/core/RootRef';\n *\n * function MyComponent() {\n *   const domRef = React.useRef();\n *\n *   React.useEffect(() => {\n *     console.log(domRef.current); // DOM node\n *   }, []);\n *\n *   return (\n *     <RootRef rootRef={domRef}>\n *       <SomeChildComponent />\n *     </RootRef>\n *   );\n * }\n * ```\n */\n\nclass RootRef extends React.Component {\n  componentDidMount() {\n    this.ref = ReactDOM.findDOMNode(this);\n    setRef(this.props.rootRef, this.ref);\n  }\n\n  componentDidUpdate(prevProps) {\n    const ref = ReactDOM.findDOMNode(this);\n\n    if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {\n      if (prevProps.rootRef !== this.props.rootRef) {\n        setRef(prevProps.rootRef, null);\n      }\n\n      this.ref = ref;\n      setRef(this.props.rootRef, this.ref);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ref = null;\n    setRef(this.props.rootRef, null);\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RootRef.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * A ref that points to the first DOM node of the wrapped element.\n   */\n  rootRef: refType.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;\n}\n\nexport default RootRef;"]},"metadata":{},"sourceType":"module"}