{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nconst Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'hover',\n    variant = 'inherit'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  const {\n    isFocusVisible,\n    onBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n\n  const handleBlur = event => {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleFocus = event => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[`underline${capitalize(underline)}`], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/Link/Link.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","capitalize","withStyles","elementTypeAcceptingRef","useIsFocusVisible","useForkRef","Typography","styles","root","underlineNone","textDecoration","underlineHover","underlineAlways","button","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","focusVisible","Link","forwardRef","props","ref","classes","className","color","component","onBlur","onFocus","TypographyClasses","underline","variant","other","isFocusVisible","onBlurVisible","focusVisibleRef","setFocusVisible","useState","handlerRef","handleBlur","event","handleFocus","createElement","process","env","NODE_ENV","propTypes","children","node","isRequired","object","string","oneOf","func","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nconst Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  const {\n    classes,\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'hover',\n    variant = 'inherit'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  const {\n    isFocusVisible,\n    onBlurVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n\n  const handleBlur = event => {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleFocus = event => {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[`underline${capitalize(underline)}`], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);"]},"metadata":{},"sourceType":"module"}