{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { HTMLElementType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport * as ReactDOM from 'react-dom';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {\n  const {\n    autoFocus = true,\n    children,\n    classes,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    onEntering,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    variant = 'selectedMenu'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"onEntering\", \"open\", \"PaperProps\", \"PopoverClasses\", \"transitionDuration\", \"variant\"]);\n\n  const theme = useTheme();\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const contentAnchorRef = React.useRef(null);\n\n  const getContentAnchorEl = () => contentAnchorRef.current;\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant !== \"menu\" && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: instance => {\n          // #StrictMode ready\n          contentAnchorRef.current = ReactDOM.findDOMNode(instance);\n          setRef(child.ref, instance);\n        }\n      });\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(Popover, _extends({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    onEntering: handleEntering,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: _extends({}, PaperProps, {\n      classes: _extends({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration\n  }, other), /*#__PURE__*/React.createElement(MenuList, _extends({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n    autoFocusItem: autoFocusItem,\n    variant: variant\n  }, MenuListProps, {\n    className: clsx(classes.list, MenuListProps.className)\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A HTML element, or a function that returns it.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenu'\n})(Menu);","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/Menu/Menu.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","isFragment","PropTypes","clsx","HTMLElementType","withStyles","Popover","MenuList","ReactDOM","setRef","useTheme","RTL_ORIGIN","vertical","horizontal","LTR_ORIGIN","styles","paper","maxHeight","WebkitOverflowScrolling","list","outline","Menu","forwardRef","props","ref","autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","variant","other","theme","autoFocusItem","menuListActionsRef","useRef","contentAnchorRef","getContentAnchorEl","current","handleEntering","element","isAppearing","adjustStyleForScrollbar","handleListKeyDown","event","key","preventDefault","activeItemIndex","Children","map","child","index","isValidElement","process","env","NODE_ENV","console","error","join","disabled","selected","items","cloneElement","instance","findDOMNode","createElement","anchorOrigin","direction","transformOrigin","root","onKeyDown","actions","className","propTypes","anchorEl","oneOfType","func","bool","node","object","onEnter","onEntered","onExit","onExited","onExiting","isRequired","oneOf","number","shape","appear","enter","exit","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,QAAQ,EAAE,KADO;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAAnB;AAIA,MAAMC,UAAU,GAAG;AACjBF,EAAAA,QAAQ,EAAE,KADO;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAAnB;AAIA,OAAO,MAAME,MAAM,GAAG;AACpB;AACAC,EAAAA,KAAK,EAAE;AACL;AACA;AACA;AACAC,IAAAA,SAAS,EAAE,mBAJN;AAKL;AACAC,IAAAA,uBAAuB,EAAE;AANpB,GAFa;;AAWpB;AACAC,EAAAA,IAAI,EAAE;AACJ;AACAC,IAAAA,OAAO,EAAE;AAFL;AAZc,CAAf;AAiBP,MAAMC,IAAI,GAAG,aAAarB,KAAK,CAACsB,UAAN,CAAiB,SAASD,IAAT,CAAcE,KAAd,EAAqBC,GAArB,EAA0B;AACnE,QAAM;AACJC,IAAAA,SAAS,GAAG,IADR;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,oBAAoB,GAAG,KAJnB;AAKJC,IAAAA,aAAa,GAAG,EALZ;AAMJC,IAAAA,OANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,IARI;AASJC,IAAAA,UAAU,GAAG,EATT;AAUJC,IAAAA,cAVI;AAWJC,IAAAA,kBAAkB,GAAG,MAXjB;AAYJC,IAAAA,OAAO,GAAG;AAZN,MAaFb,KAbJ;AAAA,QAcMc,KAAK,GAAGtC,6BAA6B,CAACwB,KAAD,EAAQ,CAAC,WAAD,EAAc,UAAd,EAA0B,SAA1B,EAAqC,sBAArC,EAA6D,eAA7D,EAA8E,SAA9E,EAAyF,YAAzF,EAAuG,MAAvG,EAA+G,YAA/G,EAA6H,gBAA7H,EAA+I,oBAA/I,EAAqK,SAArK,CAAR,CAd3C;;AAgBA,QAAMe,KAAK,GAAG5B,QAAQ,EAAtB;AACA,QAAM6B,aAAa,GAAGd,SAAS,IAAI,CAACG,oBAAd,IAAsCI,IAA5D;AACA,QAAMQ,kBAAkB,GAAGxC,KAAK,CAACyC,MAAN,CAAa,IAAb,CAA3B;AACA,QAAMC,gBAAgB,GAAG1C,KAAK,CAACyC,MAAN,CAAa,IAAb,CAAzB;;AAEA,QAAME,kBAAkB,GAAG,MAAMD,gBAAgB,CAACE,OAAlD;;AAEA,QAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,WAAV,KAA0B;AAC/C,QAAIP,kBAAkB,CAACI,OAAvB,EAAgC;AAC9BJ,MAAAA,kBAAkB,CAACI,OAAnB,CAA2BI,uBAA3B,CAAmDF,OAAnD,EAA4DR,KAA5D;AACD;;AAED,QAAIP,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACe,OAAD,EAAUC,WAAV,CAAV;AACD;AACF,GARD;;AAUA,QAAME,iBAAiB,GAAGC,KAAK,IAAI;AACjC,QAAIA,KAAK,CAACC,GAAN,KAAc,KAAlB,EAAyB;AACvBD,MAAAA,KAAK,CAACE,cAAN;;AAEA,UAAItB,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACoB,KAAD,EAAQ,YAAR,CAAP;AACD;AACF;AACF,GARD;AASA;;;;;;;AAOA,MAAIG,eAAe,GAAG,CAAC,CAAvB,CAlDmE,CAkDzC;AAC1B;AACA;;AAEArD,EAAAA,KAAK,CAACsD,QAAN,CAAeC,GAAf,CAAmB7B,QAAnB,EAA6B,CAAC8B,KAAD,EAAQC,KAAR,KAAkB;AAC7C,QAAI,EAAE,aAAazD,KAAK,CAAC0D,cAAN,CAAqBF,KAArB,CAAnB,EAAgD;AAC9C;AACD;;AAED,QAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI5D,UAAU,CAACuD,KAAD,CAAd,EAAuB;AACrBM,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAC,uEAAD,EAA0E,sCAA1E,EAAkHC,IAAlH,CAAuH,IAAvH,CAAd;AACD;AACF;;AAED,QAAI,CAACR,KAAK,CAACjC,KAAN,CAAY0C,QAAjB,EAA2B;AACzB,UAAI7B,OAAO,KAAK,MAAZ,IAAsBoB,KAAK,CAACjC,KAAN,CAAY2C,QAAtC,EAAgD;AAC9Cb,QAAAA,eAAe,GAAGI,KAAlB;AACD,OAFD,MAEO,IAAIJ,eAAe,KAAK,CAAC,CAAzB,EAA4B;AACjCA,QAAAA,eAAe,GAAGI,KAAlB;AACD;AACF;AACF,GAlBD;AAmBA,QAAMU,KAAK,GAAGnE,KAAK,CAACsD,QAAN,CAAeC,GAAf,CAAmB7B,QAAnB,EAA6B,CAAC8B,KAAD,EAAQC,KAAR,KAAkB;AAC3D,QAAIA,KAAK,KAAKJ,eAAd,EAA+B;AAC7B,aAAO,aAAarD,KAAK,CAACoE,YAAN,CAAmBZ,KAAnB,EAA0B;AAC5ChC,QAAAA,GAAG,EAAE6C,QAAQ,IAAI;AACf;AACA3B,UAAAA,gBAAgB,CAACE,OAAjB,GAA2BpC,QAAQ,CAAC8D,WAAT,CAAqBD,QAArB,CAA3B;AACA5D,UAAAA,MAAM,CAAC+C,KAAK,CAAChC,GAAP,EAAY6C,QAAZ,CAAN;AACD;AAL2C,OAA1B,CAApB;AAOD;;AAED,WAAOb,KAAP;AACD,GAZa,CAAd;AAaA,SAAO,aAAaxD,KAAK,CAACuE,aAAN,CAAoBjE,OAApB,EAA6BR,QAAQ,CAAC;AACxD6C,IAAAA,kBAAkB,EAAEA,kBADoC;AAExDhB,IAAAA,OAAO,EAAEO,cAF+C;AAGxDJ,IAAAA,OAAO,EAAEA,OAH+C;AAIxDC,IAAAA,UAAU,EAAEc,cAJ4C;AAKxD2B,IAAAA,YAAY,EAAElC,KAAK,CAACmC,SAAN,KAAoB,KAApB,GAA4B9D,UAA5B,GAAyCG,UALC;AAMxD4D,IAAAA,eAAe,EAAEpC,KAAK,CAACmC,SAAN,KAAoB,KAApB,GAA4B9D,UAA5B,GAAyCG,UANF;AAOxDmB,IAAAA,UAAU,EAAEnC,QAAQ,CAAC,EAAD,EAAKmC,UAAL,EAAiB;AACnCN,MAAAA,OAAO,EAAE7B,QAAQ,CAAC,EAAD,EAAKmC,UAAU,CAACN,OAAhB,EAAyB;AACxCgD,QAAAA,IAAI,EAAEhD,OAAO,CAACX;AAD0B,OAAzB;AADkB,KAAjB,CAPoC;AAYxDgB,IAAAA,IAAI,EAAEA,IAZkD;AAaxDR,IAAAA,GAAG,EAAEA,GAbmD;AAcxDW,IAAAA,kBAAkB,EAAEA;AAdoC,GAAD,EAetDE,KAfsD,CAArC,EAeT,aAAarC,KAAK,CAACuE,aAAN,CAAoBhE,QAApB,EAA8BT,QAAQ,CAAC;AAC7D8E,IAAAA,SAAS,EAAE3B,iBADkD;AAE7D4B,IAAAA,OAAO,EAAErC,kBAFoD;AAG7Df,IAAAA,SAAS,EAAEA,SAAS,KAAK4B,eAAe,KAAK,CAAC,CAArB,IAA0BzB,oBAA/B,CAHyC;AAI7DW,IAAAA,aAAa,EAAEA,aAJ8C;AAK7DH,IAAAA,OAAO,EAAEA;AALoD,GAAD,EAM3DP,aAN2D,EAM5C;AAChBiD,IAAAA,SAAS,EAAE3E,IAAI,CAACwB,OAAO,CAACR,IAAT,EAAeU,aAAa,CAACiD,SAA7B;AADC,GAN4C,CAAtC,EAQpBX,KARoB,CAfJ,CAApB;AAwBD,CA9GyB,CAA1B;AA+GAR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCxC,IAAI,CAAC0D,SAAL,GAAiB;AACvD;AACA;AACA;AACA;;AAEA;;;;AAIAC,EAAAA,QAAQ,EAAE9E;AACV;AADmB,GAElB+E,SAFS,CAEC,CAAC7E,eAAD,EAAkBF,SAAS,CAACgF,IAA5B,CAFD,CAV6C;;AAcvD;;;;;;AAMAzD,EAAAA,SAAS,EAAEvB,SAAS,CAACiF,IApBkC;;AAsBvD;;;AAGAzD,EAAAA,QAAQ,EAAExB,SAAS,CAACkF,IAzBmC;;AA2BvD;;;;AAIAzD,EAAAA,OAAO,EAAEzB,SAAS,CAACmF,MA/BoC;;AAiCvD;;;;;;AAMAzD,EAAAA,oBAAoB,EAAE1B,SAAS,CAACiF,IAvCuB;;AAyCvD;;;AAGAtD,EAAAA,aAAa,EAAE3B,SAAS,CAACmF,MA5C8B;;AA8CvD;;;;;;AAMAvD,EAAAA,OAAO,EAAE5B,SAAS,CAACgF,IApDoC;;AAsDvD;;;AAGAI,EAAAA,OAAO,EAAEpF,SAAS,CAACgF,IAzDoC;;AA2DvD;;;AAGAK,EAAAA,SAAS,EAAErF,SAAS,CAACgF,IA9DkC;;AAgEvD;;;AAGAnD,EAAAA,UAAU,EAAE7B,SAAS,CAACgF,IAnEiC;;AAqEvD;;;AAGAM,EAAAA,MAAM,EAAEtF,SAAS,CAACgF,IAxEqC;;AA0EvD;;;AAGAO,EAAAA,QAAQ,EAAEvF,SAAS,CAACgF,IA7EmC;;AA+EvD;;;AAGAQ,EAAAA,SAAS,EAAExF,SAAS,CAACgF,IAlFkC;;AAoFvD;;;AAGAlD,EAAAA,IAAI,EAAE9B,SAAS,CAACiF,IAAV,CAAeQ,UAvFkC;;AAyFvD;;;AAGA1D,EAAAA,UAAU,EAAE/B,SAAS,CAACmF,MA5FiC;;AA8FvD;;;AAGAnD,EAAAA,cAAc,EAAEhC,SAAS,CAACmF,MAjG6B;;AAmGvD;;;AAGAlD,EAAAA,kBAAkB,EAAEjC,SAAS,CAAC+E,SAAV,CAAoB,CAAC/E,SAAS,CAAC0F,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B1F,SAAS,CAAC2F,MAAtC,EAA8C3F,SAAS,CAAC4F,KAAV,CAAgB;AACpGC,IAAAA,MAAM,EAAE7F,SAAS,CAAC2F,MADkF;AAEpGG,IAAAA,KAAK,EAAE9F,SAAS,CAAC2F,MAFmF;AAGpGI,IAAAA,IAAI,EAAE/F,SAAS,CAAC2F;AAHoF,GAAhB,CAA9C,CAApB,CAtGmC;;AA4GvD;;;;AAIAzD,EAAAA,OAAO,EAAElC,SAAS,CAAC0F,KAAV,CAAgB,CAAC,MAAD,EAAS,cAAT,CAAhB;AAhH8C,CAAzD,GAiHI,KAAK,CAjHT;AAkHA,eAAevF,UAAU,CAACU,MAAD,EAAS;AAChCmF,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZ7E,IAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { HTMLElementType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport * as ReactDOM from 'react-dom';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {\n  const {\n    autoFocus = true,\n    children,\n    classes,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    onEntering,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    variant = 'selectedMenu'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"onEntering\", \"open\", \"PaperProps\", \"PopoverClasses\", \"transitionDuration\", \"variant\"]);\n\n  const theme = useTheme();\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const contentAnchorRef = React.useRef(null);\n\n  const getContentAnchorEl = () => contentAnchorRef.current;\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant !== \"menu\" && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: instance => {\n          // #StrictMode ready\n          contentAnchorRef.current = ReactDOM.findDOMNode(instance);\n          setRef(child.ref, instance);\n        }\n      });\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(Popover, _extends({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    onEntering: handleEntering,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: _extends({}, PaperProps, {\n      classes: _extends({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration\n  }, other), /*#__PURE__*/React.createElement(MenuList, _extends({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n    autoFocusItem: autoFocusItem,\n    variant: variant\n  }, MenuListProps, {\n    className: clsx(classes.list, MenuListProps.className)\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A HTML element, or a function that returns it.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenu'\n})(Menu);"]},"metadata":{},"sourceType":"module"}