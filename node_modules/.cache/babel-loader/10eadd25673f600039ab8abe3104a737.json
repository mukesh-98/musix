{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from '../styles/useTheme';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport useMediaQuery from '../useMediaQuery'; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport const isWidthDown = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n\n    const _getThemeProps = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props: _extends({}, props)\n    }),\n          {\n      initialWidth,\n      width\n    } = _getThemeProps,\n          other = _objectWithoutPropertiesLoose(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n\n    const more = _extends({\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n    }, withThemeOption ? {\n      theme\n    } : {}, other); // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n\n\n    if (more.width === undefined) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(Component, more);\n  }\n\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use an heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n  } : void 0;\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n\n  hoistNonReactStatics(WithWidth, Component);\n  return WithWidth;\n};\n\nexport default withWidth;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/withWidth/withWidth.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","getDisplayName","getThemeProps","hoistNonReactStatics","useTheme","keys","breakpointKeys","useMediaQuery","isWidthUp","breakpoint","width","inclusive","indexOf","isWidthDown","useEnhancedEffect","window","useEffect","useLayoutEffect","withWidth","options","Component","withTheme","withThemeOption","noSSR","initialWidth","initialWidthOption","WithWidth","props","contextTheme","theme","_getThemeProps","name","other","mountedState","setMountedState","useState","breakpoints","slice","reverse","widthComputed","reduce","output","key","matches","up","more","undefined","createElement","process","env","NODE_ENV","propTypes","oneOf","object","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getDisplayName } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport useTheme from '../styles/useTheme';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport useMediaQuery from '../useMediaQuery'; // By default, returns true if screen width is the same or greater than the given breakpoint.\n\nexport const isWidthUp = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);\n  }\n\n  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);\n}; // By default, returns true if screen width is the same or less than the given breakpoint.\n\nexport const isWidthDown = (breakpoint, width, inclusive = true) => {\n  if (inclusive) {\n    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);\n  }\n\n  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);\n};\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n\nconst withWidth = (options = {}) => Component => {\n  const {\n    withTheme: withThemeOption = false,\n    noSSR = false,\n    initialWidth: initialWidthOption\n  } = options;\n\n  function WithWidth(props) {\n    const contextTheme = useTheme();\n    const theme = props.theme || contextTheme;\n\n    const _getThemeProps = getThemeProps({\n      theme,\n      name: 'MuiWithWidth',\n      props: _extends({}, props)\n    }),\n          {\n      initialWidth,\n      width\n    } = _getThemeProps,\n          other = _objectWithoutPropertiesLoose(_getThemeProps, [\"initialWidth\", \"width\"]);\n\n    const [mountedState, setMountedState] = React.useState(false);\n    useEnhancedEffect(() => {\n      setMountedState(true);\n    }, []);\n    /**\n     * innerWidth |xs      sm      md      lg      xl\n     *            |-------|-------|-------|-------|------>\n     * width      |  xs   |  sm   |  md   |  lg   |  xl\n     */\n\n    const keys = theme.breakpoints.keys.slice().reverse();\n    const widthComputed = keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useMediaQuery(theme.breakpoints.up(key));\n      return !output && matches ? key : output;\n    }, null);\n\n    const more = _extends({\n      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption\n    }, withThemeOption ? {\n      theme\n    } : {}, other); // When rendering the component on the server,\n    // we have no idea about the client browser screen width.\n    // In order to prevent blinks and help the reconciliation of the React tree\n    // we are not rendering the child component.\n    //\n    // An alternative is to use the `initialWidth` property.\n\n\n    if (more.width === undefined) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(Component, more);\n  }\n\n  process.env.NODE_ENV !== \"production\" ? WithWidth.propTypes = {\n    /**\n     * As `window.innerWidth` is unavailable on the server,\n     * we default to rendering an empty component during the first mount.\n     * You might want to use an heuristic to approximate\n     * the screen width of the client browser screen width.\n     *\n     * For instance, you could be using the user-agent or the client-hints.\n     * https://caniuse.com/#search=client%20hint\n     */\n    initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n    /**\n     * @ignore\n     */\n    theme: PropTypes.object,\n\n    /**\n     * Bypass the width calculation logic.\n     */\n    width: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])\n  } : void 0;\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithWidth.displayName = `WithWidth(${getDisplayName(Component)})`;\n  }\n\n  hoistNonReactStatics(WithWidth, Component);\n  return WithWidth;\n};\n\nexport default withWidth;"]},"metadata":{},"sourceType":"module"}