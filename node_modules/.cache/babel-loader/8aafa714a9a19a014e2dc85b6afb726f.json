{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * @ignore - internal component.\n */\n\nfunction Ripple(props) {\n  const {\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: childClassName\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/ButtonBase/Ripple.js"],"names":["React","PropTypes","clsx","useEventCallback","useEnhancedEffect","window","useEffect","useLayoutEffect","Ripple","props","classes","pulsate","rippleX","rippleY","rippleSize","in","inProp","onExited","timeout","leaving","setLeaving","useState","rippleClassName","ripple","rippleVisible","ripplePulsate","rippleStyles","width","height","top","left","childClassName","child","childLeaving","childPulsate","handleExited","timeoutId","setTimeout","clearTimeout","undefined","createElement","className","style","process","env","NODE_ENV","propTypes","object","isRequired","bool","func","number"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useEventCallback from '../utils/useEventCallback';\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * @ignore - internal component.\n */\n\nfunction Ripple(props) {\n  const {\n    classes,\n    pulsate = false,\n    rippleX,\n    rippleY,\n    rippleSize,\n    in: inProp,\n    onExited = () => {},\n    timeout\n  } = props;\n  const [leaving, setLeaving] = React.useState(false);\n  const rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);\n  const rippleStyles = {\n    width: rippleSize,\n    height: rippleSize,\n    top: -(rippleSize / 2) + rippleY,\n    left: -(rippleSize / 2) + rippleX\n  };\n  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);\n  const handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority\n\n  useEnhancedEffect(() => {\n    if (!inProp) {\n      // react-transition-group#onExit\n      setLeaving(true); // react-transition-group#onExited\n\n      const timeoutId = setTimeout(handleExited, timeout);\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n\n    return undefined;\n  }, [handleExited, inProp, timeout]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: rippleClassName,\n    style: rippleStyles\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: childClassName\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore - injected from TransitionGroup\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number,\n\n  /**\n   * exit delay\n   */\n  timeout: PropTypes.number.isRequired\n} : void 0;\nexport default Ripple;"]},"metadata":{},"sourceType":"module"}