{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false,\n    onRendered\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/Portal/Portal.js"],"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","setRef","useForkRef","getContainer","container","findDOMNode","useEnhancedEffect","window","useLayoutEffect","useEffect","Portal","forwardRef","props","ref","children","disablePortal","onRendered","mountNode","setMountNode","useState","handleRef","isValidElement","document","body","undefined","cloneElement","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","instanceOf","Component","func","bool"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false,\n    onRendered\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"]},"metadata":{},"sourceType":"module"}