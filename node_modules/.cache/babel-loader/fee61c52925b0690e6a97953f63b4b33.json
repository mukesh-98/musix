{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    rows,\n    rowsMax,\n    rowsMin: rowsMinProp = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"onChange\", \"rows\", \"rowsMax\", \"rowsMin\", \"style\", \"value\"]);\n\n  const rowsMin = rows || rowsMinProp;\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const computedStyle = window.getComputedStyle(input);\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (rowsMin) {\n      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [rowsMax, rowsMin, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: rowsMin,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), /*#__PURE__*/React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Use `rowsMin` instead. The prop will be removed in v5.\n   *\n   * @deprecated\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/TextareaAutosize/TextareaAutosize.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","debounce","useForkRef","getStyleValue","computedStyle","property","parseInt","useEnhancedEffect","window","useLayoutEffect","useEffect","styles","shadow","visibility","position","overflow","height","top","left","transform","TextareaAutosize","forwardRef","props","ref","onChange","rows","rowsMax","rowsMin","rowsMinProp","style","value","other","current","isControlled","useRef","inputRef","handleRef","shadowRef","renders","state","setState","useState","syncHeight","useCallback","input","getComputedStyle","inputShallow","width","placeholder","slice","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","process","env","NODE_ENV","console","error","join","handleResize","addEventListener","clear","removeEventListener","handleChange","event","createElement","Fragment","className","readOnly","tabIndex","propTypes","string","func","oneOfType","number","object","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nconst styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {\n  const {\n    onChange,\n    rows,\n    rowsMax,\n    rowsMin: rowsMinProp = 1,\n    style,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"onChange\", \"rows\", \"rowsMax\", \"rowsMin\", \"style\", \"value\"]);\n\n  const rowsMin = rows || rowsMinProp;\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(ref, inputRef);\n  const shadowRef = React.useRef(null);\n  const renders = React.useRef(0);\n  const [state, setState] = React.useState({});\n  const syncHeight = React.useCallback(() => {\n    const input = inputRef.current;\n    const computedStyle = window.getComputedStyle(input);\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n\n    const boxSizing = computedStyle['box-sizing'];\n    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    const innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    let outerHeight = innerHeight;\n\n    if (rowsMin) {\n      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(prevState => {\n      // Need a large enough difference to update the height.\n      // This prevents infinite rendering loop.\n      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {\n        renders.current += 1;\n        return {\n          overflow,\n          outerHeightStyle\n        };\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (renders.current === 20) {\n          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\\n'));\n        }\n      }\n\n      return prevState;\n    });\n  }, [rowsMax, rowsMin, props.placeholder]);\n  React.useEffect(() => {\n    const handleResize = debounce(() => {\n      renders.current = 0;\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  React.useEffect(() => {\n    renders.current = 0;\n  }, [value]);\n\n  const handleChange = event => {\n    renders.current = 0;\n\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: rowsMin,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough difference to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), /*#__PURE__*/React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Use `rowsMin` instead. The prop will be removed in v5.\n   *\n   * @deprecated\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport default TextareaAutosize;"]},"metadata":{},"sourceType":"module"}