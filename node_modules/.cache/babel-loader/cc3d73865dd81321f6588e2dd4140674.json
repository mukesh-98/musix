{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport useEventCallback from '../utils/useEventCallback';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet nodeThatClaimedTheSwipe = null; // Exported for test purposes.\n\nexport function reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n\nfunction calculateCurrentX(anchor, touches) {\n  return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches) {\n  return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  let domTreeShapes = [];\n\n  while (element && element !== rootNode) {\n    const style = window.getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      domTreeShapes = [];\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n\nfunction findNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = shape[axisProperties.scrollPosition[axis]];\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return shape;\n    }\n\n    return null;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: _extends({}, inProps),\n    theme\n  });\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, [\"BackdropProps\"]),\n        other = _objectWithoutPropertiesLoose(props, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"]);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(event => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    nodeThatClaimedTheSwipe = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, event.changedTouches);\n    } else {\n      current = calculateCurrentY(anchorRtl, event.changedTouches);\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(event => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {\n      const domTreeShapes = getDomTreeShapes(event.target, paperRef.current);\n      const nativeHandler = findNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (nativeHandler) {\n        nodeThatClaimedTheSwipe = nativeHandler;\n        return;\n      }\n\n      nodeThatClaimedTheSwipe = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.\n\n      if (dx > dy) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(event);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= swipeAreaWidth;\n          } else {\n            swipeInstance.current.startY -= swipeAreaWidth;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(event => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (event.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (event.muiHandled) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (!open) {\n      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    event.muiHandled = true;\n    nodeThatClaimedTheSwipe = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: false\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: false\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (nodeThatClaimedTheSwipe === swipeInstance.current) {\n      nodeThatClaimedTheSwipe = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  const handleBackdropRef = React.useCallback(instance => {\n    // #StrictMode ready\n    backdropRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Drawer, _extends({\n    open: variant === 'temporary' && maybeSwiping ? true : open,\n    variant: variant,\n    ModalProps: _extends({\n      BackdropProps: _extends({}, BackdropProps, {\n        ref: handleBackdropRef\n      })\n    }, ModalPropsProp),\n    PaperProps: _extends({}, PaperProps, {\n      style: _extends({\n        pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n      }, PaperProps.style),\n      ref: paperRef\n    }),\n    anchor: anchor,\n    transitionDuration: calculatedDurationRef.current || transitionDuration,\n    onClose: onClose,\n    ref: ref\n  }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/React.createElement(NoSsr, null, /*#__PURE__*/React.createElement(SwipeArea, _extends({\n    anchor: anchor,\n    ref: swipeAreaRef,\n    width: swipeAreaWidth\n  }, SwipeAreaProps))));\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes = {\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/SwipeableDrawer/SwipeableDrawer.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","ReactDOM","elementTypeAcceptingRef","getThemeProps","Drawer","getAnchor","isHorizontal","ownerDocument","useEventCallback","duration","useTheme","getTransitionProps","NoSsr","SwipeArea","UNCERTAINTY_THRESHOLD","nodeThatClaimedTheSwipe","reset","calculateCurrentX","anchor","touches","document","body","offsetWidth","pageX","calculateCurrentY","window","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","parentElement","findNativeHandler","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","transitionDurationDefault","enter","enteringScreen","exit","leavingScreen","useEnhancedEffect","useLayoutEffect","useEffect","SwipeableDrawer","forwardRef","inProps","ref","theme","props","name","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","ModalPropsProp","other","maybeSwiping","setMaybeSwiping","useState","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","mode","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","transitions","create","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","event","horizontal","changedTouches","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","nativeHandler","dx","dy","cancelable","preventDefault","definitelySwiping","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","muiHandled","doc","addEventListener","passive","removeEventListener","undefined","handleBackdropRef","instance","findDOMNode","createElement","Fragment","pointerEvents","width","process","env","NODE_ENV","propTypes","oneOf","children","node","bool","number","component","func","isRequired","object","oneOfType"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport { getThemeProps } from '@material-ui/styles';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport useEventCallback from '../utils/useEventCallback';\nimport { duration } from '../styles/transitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport NoSsr from '../NoSsr';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// We can only have one node at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet nodeThatClaimedTheSwipe = null; // Exported for test purposes.\n\nexport function reset() {\n  nodeThatClaimedTheSwipe = null;\n}\n\nfunction calculateCurrentX(anchor, touches) {\n  return anchor === 'right' ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches) {\n  return anchor === 'bottom' ? window.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  let domTreeShapes = [];\n\n  while (element && element !== rootNode) {\n    const style = window.getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      domTreeShapes = [];\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n\nfunction findNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = shape[axisProperties.scrollPosition[axis]];\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return shape;\n    }\n\n    return null;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: _extends({}, inProps),\n    theme\n  });\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, [\"BackdropProps\"]),\n        other = _objectWithoutPropertiesLoose(props, [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"]);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(event => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    nodeThatClaimedTheSwipe = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, event.changedTouches);\n    } else {\n      current = calculateCurrentY(anchorRtl, event.changedTouches);\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(event => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {\n      const domTreeShapes = getDomTreeShapes(event.target, paperRef.current);\n      const nativeHandler = findNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (nativeHandler) {\n        nodeThatClaimedTheSwipe = nativeHandler;\n        return;\n      }\n\n      nodeThatClaimedTheSwipe = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY); // We are likely to be swiping, let's prevent the scroll event on iOS.\n\n      if (dx > dy) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(event);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= swipeAreaWidth;\n          } else {\n            swipeInstance.current.startY -= swipeAreaWidth;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(event => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (event.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (event.muiHandled) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, event.touches);\n    const currentY = calculateCurrentY(anchorRtl, event.touches);\n\n    if (!open) {\n      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    event.muiHandled = true;\n    nodeThatClaimedTheSwipe = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: false\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: false\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (nodeThatClaimedTheSwipe === swipeInstance.current) {\n      nodeThatClaimedTheSwipe = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  const handleBackdropRef = React.useCallback(instance => {\n    // #StrictMode ready\n    backdropRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Drawer, _extends({\n    open: variant === 'temporary' && maybeSwiping ? true : open,\n    variant: variant,\n    ModalProps: _extends({\n      BackdropProps: _extends({}, BackdropProps, {\n        ref: handleBackdropRef\n      })\n    }, ModalPropsProp),\n    PaperProps: _extends({}, PaperProps, {\n      style: _extends({\n        pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n      }, PaperProps.style),\n      ref: paperRef\n    }),\n    anchor: anchor,\n    transitionDuration: calculatedDurationRef.current || transitionDuration,\n    onClose: onClose,\n    ref: ref\n  }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/React.createElement(NoSsr, null, /*#__PURE__*/React.createElement(SwipeArea, _extends({\n    anchor: anchor,\n    ref: swipeAreaRef,\n    width: swipeAreaWidth\n  }, SwipeAreaProps))));\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes = {\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['left', 'top', 'right', 'bottom']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change his state.\n   * Specified as percent (0-1) of the width of the drawer\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the drawer is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in pixels where the\n   * drawer can be swiped open from.\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"]},"metadata":{},"sourceType":"module"}