{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n\n  let text = nextFocus.innerText;\n\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n\n  text = text.trim().toLowerCase();\n\n  if (text.length === 0) {\n    return false;\n  }\n\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return;\n      }\n\n      wrappedOnce = true;\n    } // Same logic as useAutocomplete.js\n\n\n    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n\n    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return;\n    }\n  }\n}\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\n\nconst MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    onKeyDown,\n    variant = 'selectedMenu'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"actions\", \"autoFocus\", \"autoFocusItem\", \"children\", \"className\", \"disabledItemsFocusable\", \"disableListWrap\", \"onKeyDown\", \"variant\"]);\n\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, () => ({\n    adjustStyleForScrollbar: (containerElement, theme) => {\n      // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n      const noExplicitWidth = !listRef.current.style.width;\n\n      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n        const scrollbarSize = `${getScrollbarSize(true)}px`;\n        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n      }\n\n      return listRef.current;\n    }\n  }), []);\n\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n\n    const currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, newChildProps);\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(List, _extends({\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1\n  }, other), items);\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   */\n  autoFocusItem: PropTypes.bool,\n\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default MenuList;","map":{"version":3,"sources":["/home/ovesh/Desktop/MukeshParmar_Project/React/musix/node_modules/@material-ui/core/es/MenuList/MenuList.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","isFragment","PropTypes","ReactDOM","ownerDocument","List","getScrollbarSize","useForkRef","nextItem","list","item","disableListWrap","firstChild","nextElementSibling","previousItem","lastChild","previousElementSibling","textCriteriaMatches","nextFocus","textCriteria","undefined","text","innerText","textContent","trim","toLowerCase","length","repeating","keys","indexOf","join","moveFocus","currentFocus","disabledItemsFocusable","traversalFunction","wrappedOnce","nextFocusDisabled","disabled","getAttribute","hasAttribute","focus","useEnhancedEffect","window","useEffect","useLayoutEffect","MenuList","forwardRef","props","ref","actions","autoFocus","autoFocusItem","children","className","onKeyDown","variant","other","listRef","useRef","textCriteriaRef","previousKeyMatched","lastTime","current","useImperativeHandle","adjustStyleForScrollbar","containerElement","theme","noExplicitWidth","style","width","clientHeight","scrollbarSize","direction","handleKeyDown","event","key","activeElement","preventDefault","criteria","lowerKey","currTime","performance","now","push","keepFocusOnCurrent","handleOwnRef","useCallback","instance","findDOMNode","handleRef","activeItemIndex","Children","forEach","child","index","isValidElement","process","env","NODE_ENV","console","error","selected","items","map","newChildProps","tabIndex","cloneElement","createElement","role","propTypes","bool","node","string","func","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n\n  let text = nextFocus.innerText;\n\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n\n  text = text.trim().toLowerCase();\n\n  if (text.length === 0) {\n    return false;\n  }\n\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return;\n      }\n\n      wrappedOnce = true;\n    } // Same logic as useAutocomplete.js\n\n\n    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n\n    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return;\n    }\n  }\n}\n\nconst useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\n\nconst MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    onKeyDown,\n    variant = 'selectedMenu'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"actions\", \"autoFocus\", \"autoFocusItem\", \"children\", \"className\", \"disabledItemsFocusable\", \"disableListWrap\", \"onKeyDown\", \"variant\"]);\n\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, () => ({\n    adjustStyleForScrollbar: (containerElement, theme) => {\n      // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n      const noExplicitWidth = !listRef.current.style.width;\n\n      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n        const scrollbarSize = `${getScrollbarSize(true)}px`;\n        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n      }\n\n      return listRef.current;\n    }\n  }), []);\n\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n\n    const currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  const handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  const handleRef = useForkRef(handleOwnRef, ref);\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, newChildProps);\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(List, _extends({\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1\n  }, other), items);\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   */\n  autoFocusItem: PropTypes.bool,\n\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default MenuList;"]},"metadata":{},"sourceType":"module"}